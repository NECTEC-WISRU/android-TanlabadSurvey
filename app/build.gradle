/*
 * Copyright (c) 2015 NECTEC
 *   National Electronics and Computer Technology Center, Thailand
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.20.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply from: '../gradle/versionGenerator.gradle'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "th.or.nectec.tanrabad.survey"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.genVersionCode
        versionName rootProject.ext.genVersionName
        testApplicationId "th.or.nectec.tanrabad.survey.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility rootProject.ext.javaSourceCompatibility
        targetCompatibility rootProject.ext.javaTargetCompatibility
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
        release {
            storeFile file('release.keystore')
            keyAlias System.getenv('TANRABAD_KEY_ALIAS')
            keyPassword System.getenv('TANRABAD_KEY_PASSWORD')
            storePassword System.getenv('TANRABAD_STORE_PASSWORD')
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            manifestPlaceholders = [google_map_key: System.env.'TANRABAD_GOOGLE_DEBUG_KEY']
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [google_map_key: System.getenv('TANRABAD_GOOGLE_RELEASE_KEY')]
        }
    }

    lintOptions {
        abortOnError true
        checkAllWarnings true
        warningsAsErrors true

        disable 'IconColors', 'InvalidPackage'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    apt "com.bluelinelabs:logansquare-compiler:$loganSquareVersion"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':domain')
    compile project(':entity')
    compile "com.android.support:cardview-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:percent:$supportLibVersion"
    compile "com.google.android.gms:play-services-location:$playServicesVersion"
    compile "com.google.android.gms:play-services-maps:$playServicesVersion"
    compile("com.google.maps.android:android-maps-utils:$androidMapUtilsVersion") {
        exclude(group: 'com.google.android.gms')
    }
    compile "com.bartoszlipinski.recyclerviewheader:library:1.2.0"
    compile "com.bluelinelabs:logansquare:$loganSquareVersion"
    compile("com.crashlytics.sdk.android:answers:$answersVersion@aar") { transitive = true; }
    compile("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion@aar") { transitive = true; }
    compile "com.squareup.okhttp:okhttp:$okHttpVersion"
    compile "joda-time:joda-time:$jodaTimeVersion"
    compile "net.frakbot:jumpingbeans:$jumpingbeansVersion"
    compile "th.or.nectec.android:thai-widget:$thaiWidgetVersion"
    compile "uk.co.chrisjenx:calligraphy:$calligraphyVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.robolectric:robolectric:$robolectricVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
    testCompile "com.github.tomakehurst:wiremock:$wiremockVersion"

    androidTestCompile "com.android.support:support-annotations:$supportLibVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestCompile "com.android.support.test:runner:$runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rulesVersion"
    androidTestCompile "org.mockito:mockito-core:$mockitoVersion"
    androidTestCompile "com.google.dexmaker:dexmaker:$dexmakerVersion"
    androidTestCompile("com.google.dexmaker:dexmaker-mockito:$dexmakerVersion") {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
        exclude module: 'mockito-core'
    }
}

configurations.all { resolutionStrategy.force "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"}
